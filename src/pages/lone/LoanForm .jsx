import axios from "axios";
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const LoanForm = () => {
  const [members, setMembers] = useState([]); // ‡¶∏‡¶¨ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
  const [selectedMember, setSelectedMember] = useState(null); // ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü

  const [loanAmount, setLoanAmount] = useState("");
  const [dividend, setDividend] = useState(0);
  const [dividendType, setDividendType] = useState("%");
  const [totalLoan, setTotalLoan] = useState(0);
  const [installmentType, setInstallmentType] = useState("");
  const [installments, setInstallments] = useState("");
  const [installmentAmount, setInstallmentAmount] = useState("");
  const [description, setDescription] = useState("");
  const [sendSMS, setSendSMS] = useState(false);
  const [loanDate, setLoanDate] = useState(() => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  });

  const navigate = useNavigate();

  // üîπ ‡¶∏‡¶¨ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
  useEffect(() => {
    const fetchMembers = async () => {
      try {
        const res = await axios.get(`${import.meta.env.VITE_BASE_URL}/api/members`);
        setMembers(res.data); // ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá array ‡¶Ü‡¶∏‡¶¨‡ßá
      } catch (err) {
        console.error("Error fetching members:", err);
      }
    };
    fetchMembers();
  }, []);

  // ‡¶Æ‡ßã‡¶ü ‡¶≤‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶®
  useEffect(() => {
    let total = 0;
    if (dividendType === "%") {
      total =
        parseFloat(loanAmount || 0) +
        (parseFloat(loanAmount || 0) * parseFloat(dividend || 0)) / 100;
    } else {
      total = parseFloat(loanAmount || 0) + parseFloat(dividend || 0);
    }
    setTotalLoan(total.toFixed(2));
  }, [loanAmount, dividend, dividendType]);

  // ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶®
  useEffect(() => {
    if (installments && totalLoan) {
      const perInstallment = parseFloat(totalLoan || 0) / parseFloat(installments || 1);
      setInstallmentAmount(perInstallment.toFixed(2));
    }
  }, [installments, totalLoan]);

  // ‡¶´‡¶∞‡ßç‡¶Æ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!selectedMember) {
      alert("‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®");
      return;
    }

    const loanData = {
      date: new Date(loanDate),
      memberId: selectedMember.memberId,  // ‚úÖ Custom MemberId ‡¶Ø‡¶æ‡¶¨‡ßá
      member: selectedMember._id,        // ‚úÖ MongoDB _id ‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶ö‡¶æ‡¶á‡¶≤‡ßá
      name: selectedMember.name, 
      loanAmount: parseFloat(loanAmount),
      dividend: parseFloat(dividend),
      dividendType,
      totalLoan: parseFloat(totalLoan),
      installmentType,
      installments: parseInt(installments),
      installmentAmount: parseFloat(installmentAmount),
      description,
      sendSMS,
    };

    try {
      const res = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/loans`, loanData);
      console.log("Server Response:", res.data);
      alert("Loan Saved Successfully!");
    } catch (err) {
      console.error(err);
      alert("Error saving loan data");
    }
  };

  return (
    <div className="max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-md mt-10">
      <h2 className="text-xl font-bold mb-6">‡¶≤‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</h2>

      <form className="space-y-4" onSubmit={handleSubmit}>
        {/* ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡¶É</label>
          <input
            type="date"
            value={loanDate}
            onChange={(e) => setLoanDate(e.target.value)}
            className="flex-1 border rounded px-2 py-1 text-sm"
          />
        </div>

        {/* ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶É</label>
          <select
            value={selectedMember ? selectedMember._id : ""}
            onChange={(e) => {
              const member = members.find((m) => m._id === e.target.value);
              setSelectedMember(member || null);
            }}
            className="flex-1 border rounded px-2 py-1 text-sm"
          >
            <option value="">-- ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶® --</option>
            {members.map((m) => (
              <option key={m._id} value={m._id}>
                {m.name} ({m.memberId})  {/* ‚úÖ Custom ID ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡¶ø */}
              </option>
            ))}
          </select>
          <button
            type="button"
            onClick={() => navigate("/add-member")}
            className="bg-green-500 text-white px-3 py-1 rounded text-sm"
          >
            +
          </button>
        </div>

        {/* Loan Amount */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶É</label>
          <input
            type="number"
            value={loanAmount}
            onChange={(e) => setLoanAmount(e.target.value)}
            placeholder="‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
            className="flex-1 border rounded px-2 py-1 text-sm"
          />
        </div>

        {/* ‡¶≤‡¶≠‡ßç‡¶Ø‡¶æ‡¶Ç‡¶∂ */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶≤‡¶≠‡ßç‡¶Ø‡¶æ‡¶Ç‡¶∂‡¶É</label>
          <div className="flex flex-1 gap-2">
            <input
              type="number"
              value={dividend}
              onChange={(e) => setDividend(e.target.value)}
              className="flex-1 border rounded px-2 py-1 text-sm"
            />
            <select
              value={dividendType}
              onChange={(e) => setDividendType(e.target.value)}
              className="border rounded px-2 py-1 text-sm"
            >
              <option value="%">%</option>
              <option value="‡ß≥">‡ß≥</option>
            </select>
          </div>
        </div>

        {/* ‡¶Æ‡ßã‡¶ü ‡¶≤‡ßã‡¶® */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">‡¶Æ‡ßã‡¶ü ‡¶≤‡ßã‡¶®‡¶É</label>
          <input
            type="text"
            value={totalLoan}
            readOnly
            className="flex-1 border rounded px-2 py-1 text-sm bg-gray-100"
          />
        </div>

        {/* ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶£ */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶£‡¶É</label>
          <select
            value={installmentType}
            onChange={(e) => setInstallmentType(e.target.value)}
            className="flex-1 border rounded px-2 py-1 text-sm"
          >
            <option value="">-- ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶® --</option>
            <option value="‡¶¶‡ßà‡¶®‡¶ø‡¶ï">‡¶¶‡ßà‡¶®‡¶ø‡¶ï</option>
            <option value="‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï">‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï</option>
            <option value="‡¶™‡¶æ‡¶ï‡ßç‡¶∑‡¶ø‡¶ï">‡¶™‡¶æ‡¶ï‡ßç‡¶∑‡¶ø‡¶ï</option>
            <option value="‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï">‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï</option>
            <option value="‡ß¨-‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï">‡ß¨-‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï</option>
          </select>
        </div>

        {/* ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶É</label>
          <input
            type="number"
            value={installments}
            onChange={(e) => setInstallments(e.target.value)}
            placeholder="‡¶ü‡¶ø"
            className="flex-1 border rounded px-2 py-1 text-sm"
          />
        </div>

        {/* ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ */}
        <div className="flex items-center gap-4">
          <label className="w-40 font-medium">*‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ‡¶É</label>
          <input
            type="text"
            value={installmentAmount}
            readOnly
            className="flex-1 border rounded px-2 py-1 text-sm bg-gray-100"
          />
        </div>

        {/* ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ */}
        <div className="flex items-start gap-4">
          <label className="w-40 font-medium mt-1">‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ‡¶É</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
            className="flex-1 border rounded px-2 py-1 text-sm"
          ></textarea>
        </div>

        {/* SMS */}
        <div className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={sendSMS}
            onChange={(e) => setSendSMS(e.target.checked)}
          />
          <label>SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®?</label>
        </div>

        {/* Submit */}
        <div className="text-center">
          <button
            type="submit"
            className="bg-blue-600 cursor-pointer text-white px-4 py-2 rounded hover:bg-blue-700 transition text-sm"
          >
            ‡¶≤‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
          </button>
        </div>
      </form>
    </div>
  );
};

export default LoanForm;
